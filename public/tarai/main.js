// Generated by CoffeeScript 1.3.1
(function() {

  jQuery(function() {
    var car, desc, dorian, i, master, pattern, scale, synth, tarai, timer;
    timbre.utils.exports("mtof");
    tarai = function(x, y, z) {
      tarai.result.push([x, y, z]);
      if (x <= y) {
        return y;
      } else {
        return tarai(tarai(x - 1, y, z), tarai(y - 1, z, x), tarai(z - 1, x, y));
      }
    };
    tarai.result = [];
    tarai.index = 0;
    tarai(10, 5, 0);
    dorian = [0, 2, 3, 5, 7, 9, 10];
    dorian.degreeToFreq = function(degree, rootFreq, octave) {
      var i;
      i = dorian[degree % dorian.length] + ((degree / dorian.length) | 0) * 12;
      return rootFreq * Math.pow(2, i / 12);
    };
    scale = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i < 20; i = ++_i) {
        _results.push(dorian.degreeToFreq(i, mtof(62 + 12), 1));
      }
      return _results;
    })();
    pattern = [0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1];
    car = [];
    synth = T("rhpf").set({
      wet: 0.6
    });
    timer = T("interval", 110, function() {
      var count, freq;
      count = timer.count % 16;
      if (count === 0) {
        car = tarai.result[tarai.index++];
        car.sort(function(a, b) {
          return a - b;
        });
      }
      i = car[pattern[count]];
      freq = scale[i + 1];
      if (count % 2 === 1) {
        freq /= 2;
      }
      T("*", T("+", T("saw", freq * 0.996, 0.25), T("saw", freq * 1.004, 0.25)), T("perc", "24db", 500).bang()).appendTo(synth);
      if (synth.args.length > 4) {
        synth.args.shift();
      }
      if (count === 15 && tarai.result.length === tarai.index) {
        return master.pause();
      }
    });
    master = T("efx.delay", 200, 0.75, synth);
    master.isPlaying = false;
    master.onplay = function() {
      return timer.on();
    };
    master.onpause = function() {
      return timer.off();
    };
    $(window).on("mousemove", function(e) {
      var x, y;
      x = e.pageX / window.innerWidth;
      y = e.pageY / window.innerHeight;
      synth.cutoff = (1 - (y * y)) * 8000 + 400;
      return synth.Q = x * x;
    });
    desc = (function() {
      switch (timbre.env) {
        case "webkit":
          return "timbre.js on Web Audio API";
        case "moz":
          return "timbre.js on Audio Data API";
        default:
          return "Please open with Chrome or Firefox";
      }
    })();
    $("#desc").text(desc);
    $("#play").on("click", function() {
      if (!master.isPlaying) {
        tarai.index = 0;
        master.play();
        return master.isPlaying = true;
      }
    });
    return $("#pause").on("click", function() {
      if (master.isPlaying) {
        master.pause();
        return master.isPlaying = false;
      }
    });
  });

}).call(this);
